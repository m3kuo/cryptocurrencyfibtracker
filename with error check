import yfinance as yf
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Function to calculate Fibonacci Retracement levels
def fibonacci_retracement_levels(price_min, price_max):
    levels = {
        '23.6%': price_max - 0.236 * (price_max - price_min),
        '38.2%': price_max - 0.382 * (price_max - price_min),
        '50.0%': price_max - 0.5 * (price_max - price_min),
        '61.8%': price_max - 0.618 * (price_max - price_min),
        '100.0%': price_min
    }
    return levels

# Identify major resistance and support levels
def find_support_resistance(data):
    highs = data['High'].rolling(window=15).max()
    lows = data['Low'].rolling(window=15).min()
    return highs, lows

# Download historical data for the specified cryptocurrency
def download_data(ticker, period):
    try:
        data = yf.download(ticker, period=period)
        if data.empty:
            raise ValueError("The downloaded data is empty. Check your ticker and period.")
        return data
    except Exception as e:
        print(f"An error occurred while downloading data: {e}")
        return None

# Plotting the data
def plot_data(data, graph_type, ticker, fib_levels, resistance_levels, support_levels):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.03, subplot_titles=(f'{ticker} Price', 'Volume'), row_width=[0.2, 0.7])
    
    # Add the main plot (line or candlestick)
    if graph_type == 'line':
        fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Close Price'), row=1, col=1)
    elif graph_type == 'candlestick':
        fig.add_trace(go.Candlestick(x=data.index, open=data['Open'], high=data['High'], low=data['Low'], close=data['Close'], name='Candlestick'), row=1, col=1)
    
    # Add Fibonacci levels
    for level, price in fib_levels.items():
        fig.add_hline(y=price, line_dash="dash", annotation_text=level, annotation_position="bottom right", row=1, col=1)

    # Add resistance and support levels
    fig.add_trace(go.Scatter(x=resistance_levels.index, y=resistance_levels, mode='lines', name='Resistance', line=dict(color='Red')), row=1, col=1)
    fig.add_trace(go.Scatter(x=support_levels.index, y=support_levels, mode='lines', name='Support', line=dict(color='Green')), row=1, col=1)
    
    # Add Volume to the second subplot
    fig.add_trace(go.Bar(x=data.index, y=data['Volume'], name='Volume', marker_color='blue'), row=2, col=1)
    
    # Update layout
    fig.update_layout(title=f'Fibonacci Retracement Levels for {ticker}', xaxis_title='Date', yaxis_title='Price', legend_title="Legend", xaxis_rangeslider_visible=False)
    fig.show()

# Main script
if __name__ == "__main__":
    # User input with validation
    ticker = input("Enter the cryptocurrency ticker (e.g., BTC-USD): ")
    period = input("Enter the time frame (e.g., 1y, 1mo, 5d): ")
    graph_type = input("Enter graph type (line/candlestick): ").lower()
    
    valid_graph_types = ['line', 'candlestick']
    if graph_type not in valid_graph_types:
        print("Invalid graph type entered. Please choose 'line' or 'candlestick'.")
    else:
        # Download and process data
        data = download_data(ticker, period)
        if data is not None:
            price_min = data['Close'].min()
            price_max = data['Close'].max()
            fib_levels = fibonacci_retracement_levels(price_min, price_max)
            resistance_levels, support_levels = find_support_resistance(data)
            plot_data(data, graph_type, ticker, fib_levels, resistance_levels, support_levels)
        else:
            print("Unable to retrieve data. Please check the ticker symbol and time frame.")
